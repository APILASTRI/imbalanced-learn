

.. _sphx_glr_auto_examples_ensemble_plot_balance_cascade.py:


===============
Balance cascade
===============

An illustration of the balance cascade ensemble method.




.. image:: /auto_examples/ensemble/images/sphx_glr_plot_balance_cascade_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

      Determining classes statistics... 2 classes detected: Counter({1: 4500, 0: 500})
    Elements misclassified: [ 356  182  359   53 1032 1003]
    Creation of the subset #0
    Elements misclassified: [ 356 1032  917 3014  727 2175]
    Creation of the subset #1
    Elements misclassified: [1032  917 3014 2175  416 1962 3755 3982]
    Creation of the subset #2
    Elements misclassified: [1032  917 3014 2175  416 3755 3982 4122 4254 4300 2627]
    Creation of the subset #3
    Elements misclassified: [1032  917 3014 2175  416 4254 2627 1425 2237 3818]
    Creation of the subset #4
    Elements misclassified: [ 917 3014 2175 4254 2627  898  657 2512 3681 2815  371]
    Creation of the subset #5
    Elements misclassified: [ 917 2175 4254 2627  898 2815  371 2763 2402  382 1175]
    Creation of the subset #6
    Elements misclassified: [ 917 2175 4254 2627  898 2815 2763 2402  382 3878 4039 3389 1138 1670  100
     2683 3296]
    Creation of the subset #7
    Elements misclassified: [2175 4254 2627  898 2815 2763  382 3389 2683 3296 4397 4413  124 2509]
    Creation of the subset #8
    Creation of the subset #9
    Not enough samples to continue creating subsets




|


.. code-block:: python


    print(__doc__)

    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    sns.set()

    # Define some color for the plotting
    almost_black = '#262626'
    palette = sns.color_palette()

    from sklearn.datasets import make_classification
    from sklearn.decomposition import PCA

    from imblearn.ensemble import BalanceCascade

    # Generate the dataset
    X, y = make_classification(n_classes=2, class_sep=2, weights=[0.1, 0.9],
                               n_informative=3, n_redundant=1, flip_y=0,
                               n_features=20, n_clusters_per_class=1,
                               n_samples=5000, random_state=10)

    # Instanciate a PCA object for the sake of easy visualisation
    pca = PCA(n_components=2)
    # Fit and transform x to visualise inside a 2D feature space
    X_vis = pca.fit_transform(X)

    # Apply Balance Cascade method
    bc = BalanceCascade()
    X_resampled, y_resampled = bc.fit_sample(X, y)
    X_res_vis = []
    for X_res in X_resampled:
        X_res_vis.append(pca.transform(X_res))

    # Two subplots, unpack the axes array immediately
    f, (ax1, ax2) = plt.subplots(1, 2)

    ax1.scatter(X_vis[y == 0, 0], X_vis[y == 0, 1], label="Class #0", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[0], linewidth=0.15)
    ax1.scatter(X_vis[y == 1, 0], X_vis[y == 1, 1], label="Class #1", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[2], linewidth=0.15)
    ax1.set_title('Original set')

    ax2.scatter(X_vis[y == 0, 0], X_vis[y == 0, 1], label="Class #0", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[0], linewidth=0.15)
    for iy, e in enumerate(X_res_vis):
        ax2.scatter(e[y_resampled[iy] == 1, 0], e[y_resampled[iy] == 1, 1],
                    label="Class #1", alpha=0.5, edgecolor=almost_black,
                    facecolor=np.random.rand(3,), linewidth=0.15)
    ax2.set_title('Balance cascade')

    plt.show()

**Total running time of the script:**
(0 minutes 0.687 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_balance_cascade.py <plot_balance_cascade.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_balance_cascade.ipynb <plot_balance_cascade.ipynb>`
