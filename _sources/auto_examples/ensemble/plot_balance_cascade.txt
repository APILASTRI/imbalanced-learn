

.. _sphx_glr_auto_examples_ensemble_plot_balance_cascade.py:


===============
Balance cascade
===============

An illustration of the balance cascade ensemble method.




.. image:: /auto_examples/ensemble/images/sphx_glr_plot_balance_cascade_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

      Determining classes statistics... 2 classes detected: Counter({1: 4500, 0: 500})
    Elements misclassified: [ 192 2304 1743]
    Creation of the subset #0
    Elements misclassified: [ 192 2175 2317  124  416 2402]
    Creation of the subset #1
    Elements misclassified: [ 192 2175  124  416 2402 3716 1976 1962 1773 4072 2172]
    Creation of the subset #2
    Elements misclassified: [2175 3716 1858 3020  727]
    Creation of the subset #3
    Elements misclassified: [2175 3716 1858  727   53 2347 3512 1069 3133 1562 1138]
    Creation of the subset #4
    Elements misclassified: [3716  727   53 3512 1069 3133 1562 1138  364 2763 4039 3296]
    Creation of the subset #5
    Elements misclassified: [3716  727 1138 2763 4039  601 3681]
    Creation of the subset #6
    Elements misclassified: [1138 2763 4039 3681 3982 2083 1032  226 2917 2815 2699 3014]
    Creation of the subset #7
    Elements misclassified: [2763 4039 1032 2815  917 2881 3818 2512 3389 3787 4254]
    Creation of the subset #8
    Creation of the subset #9
    Not enough samples to continue creating subsets




|


.. code-block:: python


    print(__doc__)

    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    sns.set()

    # Define some color for the plotting
    almost_black = '#262626'
    palette = sns.color_palette()

    from sklearn.datasets import make_classification
    from sklearn.decomposition import PCA

    from unbalanced_dataset.ensemble import BalanceCascade

    # Generate the dataset
    X, y = make_classification(n_classes=2, class_sep=2, weights=[0.1, 0.9],
                               n_informative=3, n_redundant=1, flip_y=0,
                               n_features=20, n_clusters_per_class=1,
                               n_samples=5000, random_state=10)

    # Instanciate a PCA object for the sake of easy visualisation
    pca = PCA(n_components=2)
    # Fit and transform x to visualise inside a 2D feature space
    X_vis = pca.fit_transform(X)

    # Apply Balance Cascade method
    bc = BalanceCascade()
    X_resampled, y_resampled = bc.fit_sample(X, y)
    X_res_vis = []
    for X_res in X_resampled:
        X_res_vis.append(pca.transform(X_res))

    # Two subplots, unpack the axes array immediately
    f, (ax1, ax2) = plt.subplots(1, 2)

    ax1.scatter(X_vis[y == 0, 0], X_vis[y == 0, 1], label="Class #0", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[0], linewidth=0.15)
    ax1.scatter(X_vis[y == 1, 0], X_vis[y == 1, 1], label="Class #1", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[2], linewidth=0.15)
    ax1.set_title('Original set')

    ax2.scatter(X_vis[y == 0, 0], X_vis[y == 0, 1], label="Class #0", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[0], linewidth=0.15)
    for iy, e in enumerate(X_res_vis):
        ax2.scatter(e[y_resampled[iy] == 1, 0], e[y_resampled[iy] == 1, 1],
                    label="Class #1", alpha=0.5, edgecolor=almost_black,
                    facecolor=np.random.rand(3,), linewidth=0.15)
    ax2.set_title('Balance cascade')

    plt.show()

**Total running time of the script:**
(0 minutes 0.362 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_balance_cascade.py <plot_balance_cascade.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_balance_cascade.ipynb <plot_balance_cascade.ipynb>`
