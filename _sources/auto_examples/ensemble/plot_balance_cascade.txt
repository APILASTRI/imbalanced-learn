

.. _sphx_glr_auto_examples_ensemble_plot_balance_cascade.py:


===============
Balance cascade
===============

An illustration of the balance cascade method.




.. image:: /auto_examples/ensemble/images/sphx_glr_plot_balance_cascade_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

      Determining classes statistics... 2 classes detected: Counter({1: 4500, 0: 500})
    Elements misclassified: [4254 2061 3296  124 4144 1464 2627]
    Creation of the subset #0
    Elements misclassified: [4254  124 1464 2627  371 2237 2751  100 1858]
    Creation of the subset #1
    Elements misclassified: [4254  124 2627 2175 4007 2815 2317]
    Creation of the subset #2
    Elements misclassified: [4254  124 2627 2175 2815 2317 2149 2763 1562 1138  657 3020  192]
    Creation of the subset #3
    Elements misclassified: [4254  124 2627 2175 2815 2317 1138 3020  192 4065 3014  367 3273 3716]
    Creation of the subset #4
    Elements misclassified: [4254  124 2627 2175 3020  192 3014   53 2683  382 1032  182  727]
    Creation of the subset #5
    Elements misclassified: [4254  124 2627 2175  192  382 1032  182  727  861  200  917 2259 3787 3133
     1670]
    Creation of the subset #6
    Elements misclassified: [4254  124 2627 2175 1032  727  200  917 3787 2930 3818]
    Creation of the subset #7
    Elements misclassified: [4254  124 2627 1032  917 3818 1769 3389 2745 1979  898 4255 3216 2402 2083]
    Creation of the subset #8
    Creation of the subset #9
    Not enough samples to continue creating subsets




|


.. code-block:: python


    print(__doc__)

    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    sns.set()

    # Define some color for the plotting
    almost_black = '#262626'
    palette = sns.color_palette()

    from sklearn.datasets import make_classification
    from sklearn.decomposition import PCA

    from unbalanced_dataset.ensemble import BalanceCascade

    # Generate the dataset
    X, y = make_classification(n_classes=2, class_sep=2, weights=[0.1, 0.9],
                               n_informative=3, n_redundant=1, flip_y=0,
                               n_features=20, n_clusters_per_class=1,
                               n_samples=5000, random_state=10)

    # Instanciate a PCA object for the sake of easy visualisation
    pca = PCA(n_components=2)
    # Fit and transform x to visualise inside a 2D feature space
    X_vis = pca.fit_transform(X)

    # Apply the random under-sampling
    bc = BalanceCascade()
    X_resampled, y_resampled = bc.fit_transform(X, y)
    X_res_vis = []
    for X_res in X_resampled:
        X_res_vis.append(pca.transform(X_res))

    # Two subplots, unpack the axes array immediately
    f, (ax1, ax2) = plt.subplots(1, 2)

    ax1.scatter(X_vis[y == 0, 0], X_vis[y == 0, 1], label="Class #0", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[0], linewidth=0.15)
    ax1.scatter(X_vis[y == 1, 0], X_vis[y == 1, 1], label="Class #1", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[2], linewidth=0.15)
    ax1.set_title('Original set')

    ax2.scatter(X_vis[y == 0, 0], X_vis[y == 0, 1], label="Class #0", alpha=0.5,
                edgecolor=almost_black, facecolor=palette[0], linewidth=0.15)
    for iy, e in enumerate(X_res_vis):
        ax2.scatter(e[y_resampled[iy] == 1, 0], e[y_resampled[iy] == 1, 1],
                    label="Class #1", alpha=0.5, edgecolor=almost_black,
                    facecolor=np.random.rand(3,), linewidth=0.15)
    ax2.set_title('Balance cascade')

    plt.show()

**Total running time of the script:**
(0 minutes 0.363 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_balance_cascade.py <plot_balance_cascade.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_balance_cascade.ipynb <plot_balance_cascade.ipynb>`
